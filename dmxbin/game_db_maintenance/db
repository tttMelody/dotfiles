#!/bin/bash

# setting environment variables
LANG=C
LC_ALL=C
# PATH="$PATH:/sbin:/usr/sbin:/usr/local/sbin"
export LANG LC_ALL PATH

RSCRIPTDIR=$(dirname  $0)
SCRIPTDIR=$(cd $RSCRIPTDIR &&  pwd)
WORKDIR=$SCRIPTDIR
SCRIPT_LIB=$SCRIPTDIR/scripts/




function print_usage {
    cat <<USAGE
	根据约定conf文件启动程序(redis,tokyotyrant,mongo,mongos,mysql)，为便于维护
	conf文件名字以type.name.port.conf 命名
	部分兼容老接口
	  init     --  初始化
	  stop     --  停止
	  start    --  开始 
	  restart  --  重启

	  backup   --  备份
	  dailyc   --  日常清理日志等
USAGE:
    ./db init [tcb|tch|redis|mysql|mongo|mongos] <name> <port>
    ./db init [tcb|tch] <name> <port> <master_host> <master_port>

    ./db [start|stop|restart|backup|dailyc] <folder_name>
    ./db start <folder_name> [folder_name ...]

EXAMPLES:

    start a new ttserver to store main user info on port 21001
        ./db init tcb main 21001
        ./db start main.tcb.21001/

    start a new slave ttserver on 31001 for a main user info master on 21001
        
        ./db init tcb main 31001 127.0.0.1 21001
        ./db start main.tcb.31001/
USAGE
    exit 0
}

<<DESC
source 一些基础性的function，以便后用
DESC

funfile=$SCRIPT_LIB/mcconf.sh
if [ ! -f $funfile ] ; then 
	echo "no $funfile"
    echo 安装scripts/examples/mcconf.sh.example 到 scrpts/mcconf.sh 以适应需求
	#print_usage
	exit 1
fi
source $funfile


sl_openlog  'db' 3 0  $WORKDIR/op.db

if [[ $# -lt 2 ]]; then
    print_usage
fi

check_support(){
	db_type=$1
	if [[ "$db_type" != "redis" ]] \
		&& [[ "$db_type" != 'tokyotyrant' ]] \
		&& [[ "$db_type" != 'tcb' ]] \
		&& [[ "$db_type" != 'tch' ]] \
		&& [[ "$db_type" != 'mongos' ]] \
		&& [[ "$db_type" != 'mysql' ]] \
		&& [[ "$db_type" != 'mongo' ]]; then
	logwarn "invalid db type: $db_type"
	exit 1
fi
return 0
}




#从配置文件结束
real_stop() {
    folder_name="$SCRIPTDIR/${db_type}.${db_name}.${db_port}"
	echo "stoping $folder_name"
	if [[ -x $folder_name/ctrl ]] ; then
		$folder_name/ctrl stop
	else
		__pidf_stop $folder_name/pid
	fi
}



show_log(){
    config_file=$1
    if [[ ! -f "$SCRIPTDIR/$config_file" ]]; then
        echo "config file not exists: $SCRIPTDIR/$config_file"
        return 1
    fi
    db_type=`echo $config_file | awk -F. '{print $1}'`
    db_name=`echo $config_file | awk -F. '{print $2}'`
    db_port=`echo $config_file | awk -F. '{print $3}'`
    folder_name="$SCRIPTDIR/${db_type}.${db_name}.${db_port}"
	shift 
	tail $* $folder_name/log
	echo -n "Pid:"
	cat $folder_name/pid
}




db_init() {
    echo "in db_init $#"
    if test $# -ne 3 && test $# -ne 5;then
        print_usage
    fi
    db_type=$1
	check_support  $db_type

    db_name=$2
    db_port=$3
    folder_name=$db_type.$db_name.$db_port
    if test -d "$SCRIPTDIR/$folder_name" ;then
        echo "folder[$folder_name] already exists"
		exit;
    fi
	mkdir $SCRIPTDIR/$folder_name
    case "$db_type" in
        tcb|tch)
			tt_init
            ;;
        redis)
            cp $SCRIPT_LIB/common.redis $WORKDIR/$folder_name/run.conf
            echo "port $db_port" >> $WORKDIR/$folder_name/run.conf
            ;;
        mysql)
			init_mysql  $db_name $db_port
            ;;
		mongo)
			;;
		mongos)
			;;
		*)
			logerror $db_type not support
			exit 1
			;;
	esac
}




db(){
	op=$1
	shift 
	for name in $*
	do
		cd $WORKDIR
		folder_name=$(basename $name)
		if ! test -d "$folder_name" ; then
            if [ -f "$folder_name" ] ; then
                folder_name=$(basename $folder_name .conf)
            else
                loginfo "ignore folder[$folder_name] not exists"
                #print_usage
                continue
            fi
		fi

		db_type=`echo $folder_name | awk -F. '{print $1}'`
		db_name=`echo $folder_name | awk -F. '{print $2}'`
		db_port=`echo $folder_name | awk -F. '{print $3}'`


		if test -z "$db_port"  || test  -z "$db_name" || test -z "$db_type" ; then
			loginfo  can not get  db_port: ignore Invalid configuration $name;
			continue 
		fi
		check_support $db_type
		[ $? -eq 0 ] || { logwarn scripts $folder_name $db_name not support  ; return 1 ; }
		export folder_name db_name db_type db_port
		db_${op}_$db_type
		[ $? -eq 0 ] || { logwarn failed db_${op}_$db_type $folder_name ; continue ; }
		loginfo ok  db_${op}_$db_type $folder_name

	done
}

case "$1" in
    init)
        if test $# -eq 4 || test $# -eq 6;then
            shift 1
            db_init $*
        else
            print_usage
        fi
        ;;
    start)
        shift 1
        db start $*
        ;;
    stop)
        shift 1
        db stop $*
        ;;
    restart)
        shift 1
        db stop $*
        db start $*
        ;;
    backup)
        shift 1
        db backup $*
        ;;
    *)
        print_usage
        ;;
esac
